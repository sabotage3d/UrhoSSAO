$#include "LuaScriptInstance.h"

class LuaScriptInstance : public Component
{
    bool CreateObject(const String scriptObjectType);
    bool CreateObject(LuaFile* scriptFile, const String scriptObjectType);
    void SetScriptFile(LuaFile* scriptFile);
    void SetScriptObjectType(const String scriptObjectType);
    void ScriptSubscribeToEvent @ SubscribeToEvent(const String eventName, void* functionOrFunctionName);
    void ScriptUnsubscribeFromEvent @ UnsubscribeFromEvent(const String eventName);
    void ScriptUnsubscribeFromAllEvents @ UnsubscribeFromAllEvents();    
    void ScriptSubscribeToEvent @ SubscribeToEvent(void* sender, const String eventName, void* functionOrFunctionName);
    void ScriptUnsubscribeFromEvent @ UnsubscribeFromEvent(void* sender, const String eventName);
    void ScriptUnsubscribeFromEvents @ UnsubscribeFromEvents(void* sender);
    LuaFile* GetScriptFile() const;
    const String GetScriptObjectType() const;

    tolua_property__get_set const LuaFile* scriptFile;
    tolua_property__get_set const String scriptObjectType;
};

$[
LuaScriptObject = {}

function LuaScriptObject:Start()
end

function LuaScriptObject:Stop()
end

function LuaScriptObject:GetNode()
    return self.node
end

function LuaScriptObject:SubscribeToEvent(param1, param2, param3)
    local instance = self.instance
    if instance == nil then
        return
    end

    if param3 == nil then
        instance:SubscribeToEvent(param1, param2)
    else
        instance:SubscribeToEvent(param1, param2, param3)
    end
end

function LuaScriptObject:UnsubscribeFromEvent(param1, param2)
    local instance = self.instance
    if instance == nil then
        return
    end

    if param2 == nil then
        instance:UnsubscribeFromEvent(param1)
    else
        instance:UnsubscribeFromEvent(param1, param2)
    end
end

function LuaScriptObject:UnsubscribeFromAllEvents()
    local instance = self.instance
    if instance == nil then
        return
    end 
    instance:UnsubscribeFromAllEvents()
end

function LuaScriptObject:UnsubscribeFromEvents(sender)
    local instance = self.instance
    if instance == nil then
        return
    end

    instance:UnsubscribeFromEvents(sender)
end

function ScriptObject()
    local o = {}
    setmetatable(o, LuaScriptObject)
    LuaScriptObject.__index = LuaScriptObject
    return o
end

function CreateScriptObjectInstance(object, instance)
    local o = {}
    setmetatable(o, object)
    object.__index = object
    
    instance.object = o
    o.instance = instance
    o.node = instance:GetNode()

    local keys = {}
    for k, v in pairs(o) do
        keys[k] = true
    end

    -- Call start function
    o:Start()

    local attrNames = {}
    for k, v in pairs(o) do
        if keys[k] == nil then
            table.insert(attrNames, k)
        end
    end

    return o, attrNames
end

function DestroyScriptObjectInstance(instance)
    local object = instance.object
    if object == nil then
        return
    end
    
    -- Call stop function
    object:Stop()
    
    object.node = nil
    object.instance = nil
    instance.object = nil
end
$]

${
#define TOLUA_DISABLE_tolua_LuaScriptLuaAPI_LuaScriptInstance_SubscribeToEvent00
static int tolua_LuaScriptLuaAPI_LuaScriptInstance_SubscribeToEvent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
    tolua_Error tolua_err;
    if (
        !tolua_isusertype(tolua_S,1,"LuaScriptInstance",0,&tolua_err) ||
        !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
        !tolua_isfunctionorurho3dstring(tolua_S,3,0,&tolua_err) ||
        !tolua_isnoobj(tolua_S,4,&tolua_err)
        )
        goto tolua_lerror;
    else
#endif
    {
        LuaScriptInstance* self = (LuaScriptInstance*)  tolua_tousertype(tolua_S,1,0);
        const String eventName = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ScriptSubscribeToEvent'", NULL);
#endif
        if (lua_isfunction(tolua_S,3))
            self->ScriptSubscribeToEvent(eventName,3);
        else
        {
            const String functionName = (const String)tolua_tourho3dstring(tolua_S,3,0);
            self->ScriptSubscribeToEvent(eventName,functionName);
        }
    }
    return 0;
#ifndef TOLUA_RELEASE
tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'SubscribeToEvent'.",&tolua_err);
    return 0;
#endif
}

#define TOLUA_DISABLE_tolua_LuaScriptLuaAPI_LuaScriptInstance_SubscribeToEvent01
static int tolua_LuaScriptLuaAPI_LuaScriptInstance_SubscribeToEvent01(lua_State* tolua_S)
{
    tolua_Error tolua_err;
    if (
        !tolua_isusertype(tolua_S,1,"LuaScriptInstance",0,&tolua_err) ||
        !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
        !tolua_isurho3dstring(tolua_S,3,0,&tolua_err) ||
        !tolua_isfunctionorurho3dstring(tolua_S,4,0,&tolua_err) ||
        !tolua_isnoobj(tolua_S,5,&tolua_err)
        )
        goto tolua_lerror;
    else
    {
        LuaScriptInstance* self = (LuaScriptInstance*)  tolua_tousertype(tolua_S,1,0);
        void* sender = ((void*)  tolua_touserdata(tolua_S,2,0));
        const String eventName = ((const String)  tolua_tourho3dstring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ScriptSubscribeToEvent'", NULL);
#endif
        if (lua_isfunction(tolua_S,4))
            self->ScriptSubscribeToEvent(sender,eventName,4);
        else
        {
            const String functionName = (const String)tolua_tourho3dstring(tolua_S,4,0);
            self->ScriptSubscribeToEvent(sender,eventName,functionName);
        }
    }
    return 0;
tolua_lerror:
    return tolua_LuaScriptLuaAPI_LuaScriptInstance_SubscribeToEvent00(tolua_S);
}
$}
